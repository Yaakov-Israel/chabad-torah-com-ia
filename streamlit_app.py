import streamlit as st

st.set_page_config(page_title="CHABAD - Tor√° com IA", layout="wide")

st.title("üåü CHABAD - Tor√° com IA üåü")
st.subheader("Seu Assistente Interativo para Estudo da Tor√° e Juda√≠smo")
# streamlit_app.py (continua√ß√£o)

import google.generativeai as genai
import streamlit as st # streamlit j√° deve estar importado, mas s√≥ para garantir

# Carregar a API Key dos Segredos do Streamlit
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except KeyError: # Chave n√£o encontrada nos segredos
    st.error("Chave API 'GOOGLE_API_KEY' n√£o encontrada nos Segredos do Streamlit.")
    st.caption("Adicione sua chave API do Google Gemini aos segredos do seu app no Streamlit Cloud.")
    st.stop() # Impede a execu√ß√£o se a chave n√£o estiver l√°
except FileNotFoundError: # Arquivo secrets.toml n√£o encontrado (mais para local)
    st.error("Arquivo de Segredos do Streamlit (secrets.toml) n√£o encontrado.")
    st.caption("Configure a GOOGLE_API_KEY corretamente.")
    st.stop()

if not GOOGLE_API_KEY: # Verifica√ß√£o adicional
    st.error("A GOOGLE_API_KEY foi carregada, mas est√° vazia. Verifique os segredos.")
    st.stop()

try:
    genai.configure(api_key=GOOGLE_API_KEY)
    # st.sidebar.success("API Key configurada!") # Feedback visual opcional na barra lateral
except Exception as e_apikey_config:
    st.sidebar.error(f"Erro ao configurar a API Key do Gemini: {e_apikey_config}")
    st.stop()

# Inicializar o modelo de IA (fa√ßa UMA VEZ no in√≠cio do script)
try:
    modelo_ia_principal = genai.GenerativeModel('gemini-1.5-flash-latest')
    # st.sidebar.info("Modelo Gemini carregado.") # Feedback opcional
except Exception as e_model_load:
    st.sidebar.error(f"Erro ao carregar o modelo Gemini ('gemini-1.5-flash-latest'): {e_model_load}")
    st.caption("Verifique o nome do modelo e se sua API key tem permiss√£o.")
    st.stop()

# O resto do seu c√≥digo da interface (st.title, etc.) continua abaixo...
st.write("Bem-vindo! Este √© o in√≠cio do nosso aplicativo.")
st.balloons() # S√≥ para ter um efeito visual de que funcionou!
# streamlit_app.py (continua√ß√£o)

if opcao_menu_st == "Pensamento de Chassidut para o Dia":
    st.subheader("Pensamento de Chassidut para o Dia")
    # Copie a l√≥gica da sua C√©lula 11 do Colab aqui
    # (a lista de pensamentos e o random.choice)
    lista_de_pensamentos_chabad = [
        "A verdadeira sabedoria (Chochm√°) √© a capacidade de ver a Divindade em tudo. A compreens√£o (Bin√°) √© desenvolver essa percep√ß√£o. O conhecimento (Daat) √© conectar-se profundamente com ela.",
        "Cada mitzv√° que cumprimos √© como acender uma vela na escurid√£o, revelando a presen√ßa de D'us e aproximando a reden√ß√£o.",
        "O estudo do Chassidut nos d√° as 'ferramentas intelectuais' para refinar nossas emo√ß√µes e servir a D'us com alegria e um cora√ß√£o pleno.",
        "A miss√£o da nossa gera√ß√£o, como ensinada pelo Rebe de Lubavitch, √© preparar o mundo para a chegada de Mashiach atrav√©s de atos de bondade e do estudo da Tor√° em todos os seus n√≠veis.",
        "N√£o subestime o poder de uma √∫nica boa a√ß√£o, uma √∫nica boa palavra ou um √∫nico bom pensamento. Cada um tem o potencial de transformar o mundo."
    ]
    pensamento_selecionado = random.choice(lista_de_pensamentos_chabad) # Certifique-se de ter 'import random' no topo do arquivo
    st.markdown(f"> *{pensamento_selecionado}*")
    st.markdown("---") # Uma linha divis√≥ria

elif opcao_menu_st == "--- Escolha uma Ferramenta ---":
    st.info("‚¨ÖÔ∏è Por favor, escolha uma ferramenta de estudo na barra lateral para come√ßar!")

# Adicionaremos os outros 'elif' para as demais op√ß√µes do menu depois.
